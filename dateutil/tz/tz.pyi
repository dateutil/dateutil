from io import (
    BufferedReader,
    BytesIO,
    StringIO,
)
from datetime import (
    datetime,
    timedelta,
    tzinfo,
)
from dateutil.parser._parser import _tzparser
from dateutil.relativedelta import relativedelta
from dateutil.rrule import rruleset
from dateutil.test._common import ComparesEqualClass
from dateutil.tz._common import _tzinfo
from typing import (
    Any,
    Dict,
    IO,
    List,
    Optional,
    Tuple,
    Type,
    Union,
)


def _datetime_to_timestamp(dt: datetime) -> float: ...


def datetime_ambiguous(
    dt: datetime,
    tz: Optional[Union[tzlocal, _tzicalvtz, tzrange, tzfile]] = None
) -> bool: ...


def datetime_exists(
    dt: datetime,
    tz: Optional[Union[tzlocal, _tzicalvtz, tzrange, tzfile]] = None
) -> bool: ...


def gettz(name: Optional[str] = ...) -> _tzinfo: ...


def resolve_imaginary(dt: datetime) -> datetime: ...


class _ContextWrapper:
    def __enter__(self) -> Union[BytesIO, IO[bytes], StringIO]: ...
    def __exit__(*args, **kwargs) -> None: ...
    def __init__(self, context: Union[BytesIO, IO[bytes], StringIO]) -> None: ...


class _ttinfo:
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> Dict[str, Union[int, timedelta, str]]: ...
    def __init__(self) -> None: ...
    def __setstate__(self, state: Dict[str, Union[int, timedelta, str]]) -> None: ...


class _tzfile:
    def __init__(self, **kwargs) -> None: ...


class _tzicalvtz:
    def __init__(self, tzid: str, comps: List[_tzicalvtzcomp] = []) -> None: ...
    def _find_comp(self, dt: datetime) -> _tzicalvtzcomp: ...
    def _find_compdt(self, comp: _tzicalvtzcomp, dt: datetime) -> datetime: ...
    def dst(self, dt: datetime) -> timedelta: ...
    def utcoffset(self, dt: datetime) -> timedelta: ...


class _tzicalvtzcomp:
    def __init__(
        self,
        tzoffsetfrom: int,
        tzoffsetto: int,
        isdst: bool,
        tzname: Optional[str] = None,
        rrule: Optional[rruleset] = None
    ) -> None: ...


class tzfile:
    def __eq__(self, other: object) -> bool: ...
    def __init__(
        self,
        fileobj: Optional[Union[BytesIO, IO[bytes], str]],
        filename: Optional[str] = None
    ) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __reduce_ex__(
        self,
        protocol: int
    ) -> Union[Tuple[Type[tzfile], Tuple[None, str], Dict[str, Union[str, Tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], Tuple[_ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo], List[_ttinfo], _ttinfo, None]]], Tuple[Type[tzfile], Tuple[None, str], Dict[str, Union[str, Tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], Tuple[_ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo], List[_ttinfo], _ttinfo, None]]], Tuple[Type[tzfile], Tuple[None, str], Dict[str, Union[str, Tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], Tuple[_ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo], List[_ttinfo], _ttinfo, None]]], Tuple[Type[tzfile], Tuple[None, str], Dict[str, Union[str, Tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int], Tuple[_ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo, _ttinfo], List[_ttinfo], _ttinfo, None]]]]: ...
    def __repr__(self) -> str: ...
    def _find_last_transition(self, dt: datetime, in_utc: bool = False) -> Optional[int]: ...
    def _find_ttinfo(self, dt: datetime) -> _ttinfo: ...
    def _get_ttinfo(self, idx: Optional[int]) -> _ttinfo: ...
    def _read_tzfile(self, fileobj: Union[BytesIO, BufferedReader]) -> _tzfile: ...
    def _resolve_ambiguous_time(self, dt: datetime) -> Optional[int]: ...
    def _set_tzdata(self, tzobj: _tzfile) -> None: ...
    def dst(self, dt: Optional[datetime]) -> Optional[timedelta]: ...
    def fromutc(self, dt: datetime) -> datetime: ...
    def is_ambiguous(self, dt: datetime, idx: Optional[int] = None) -> bool: ...
    def utcoffset(self, dt: Optional[datetime]) -> Optional[timedelta]: ...


class tzical:
    def __init__(self, fileobj: StringIO) -> None: ...
    def __repr__(self) -> str: ...
    def _parse_offset(self, s: str) -> int: ...
    def _parse_rfc(self, s: str) -> None: ...
    def get(self, tzid: Optional[str] = None) -> _tzicalvtz: ...
    def keys(self) -> List[str]: ...


class tzlocal:
    def __eq__(self, other: object) -> bool: ...
    def __init__(self) -> None: ...
    def __ne__(self, other: Any) -> bool: ...
    def __repr__(self) -> str: ...
    def _isdst(self, dt: Optional[datetime], fold_naive: bool = True) -> int: ...
    def _naive_is_dst(self, dt: datetime) -> int: ...
    def dst(self, dt: Optional[datetime]) -> Optional[timedelta]: ...
    def is_ambiguous(self, dt: datetime) -> bool: ...
    def utcoffset(self, dt: Optional[datetime]) -> Optional[timedelta]: ...


class tzoffset(tzinfo):
    def __eq__(self, other: object) -> bool: ...
    def __init__(self, name: Optional[str], offset: Union[int, float, timedelta]) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...
    def dst(self, dt: Optional[datetime]) -> timedelta: ...
    def fromutc(self, dt: datetime) -> datetime: ...
    def is_ambiguous(self, dt: datetime) -> bool: ...
    def utcoffset(self, dt: Optional[datetime]) -> timedelta: ...


class tzrange:
    def __eq__(self, other: object) -> bool: ...
    def __init__(
        self,
        stdabbr: Optional[str],
        stdoffset: Optional[Union[timedelta, int]] = None,
        dstabbr: Optional[str] = None,
        dstoffset: Optional[Union[timedelta, int]] = None,
        start: Optional[Union[relativedelta, bool]] = None,
        end: Optional[Union[relativedelta, bool]] = None
    ) -> None: ...
    @property
    def _dst_base_offset(self) -> timedelta: ...
    def transitions(self, year: int) -> Optional[Tuple[datetime, datetime]]: ...


class tzstr:
    def __init__(self, s: str, posix_offset: bool = False) -> None: ...
    def __repr__(self) -> str: ...
    def _delta(
        self,
        x: _tzparser._result._attr,
        isend: int = 0
    ) -> relativedelta: ...


class tzutc(tzinfo):
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...
    def dst(self, dt: Optional[datetime]) -> timedelta: ...
    def fromutc(self, dt: datetime) -> datetime: ...
    def is_ambiguous(self, dt: datetime) -> bool: ...
    def utcoffset(self, dt: Optional[datetime]) -> timedelta: ...
