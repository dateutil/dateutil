from datetime import (
    datetime,
    timedelta,
    tzinfo
)
from dateutil.test._common import ComparesEqualClass
from dateutil.tz.tz import tzrange
from typing import (
    Callable,
    Optional,
    Tuple,
    Union,
)


def _validate_fromutc_inputs(f: Callable) -> Callable: ...


def enfold(dt: datetime, fold: int = 1) -> datetime: ...


def tzname_in_python2(namefunc: Callable) -> Callable: ...


class _tzinfo(tzinfo):
    def _fold(self, dt: datetime) -> int: ...
    def _fold_status(self, dt_utc: datetime, dt_wall: datetime) -> int: ...
    def _fromutc(self, dt: datetime) -> datetime: ...
    def fromutc(self, dt: datetime) -> datetime: ...
    def is_ambiguous(self, dt: datetime) -> bool: ...


class tzrangebase(_tzinfo):
    def __ne__(self, other: object) -> bool: ...
    def _isdst(self, dt: Optional[datetime]) -> Optional[bool]: ...
    def _naive_isdst(self, dt: datetime, transitions: Tuple[datetime, datetime]) -> bool: ...
    def dst(self, dt: Optional[datetime]) -> timedelta: ...
    def fromutc(self, dt: datetime) -> datetime: ...
    def is_ambiguous(self, dt: datetime) -> bool: ...
    def utcoffset(self, dt: Optional[datetime]) -> Optional[timedelta]: ...
